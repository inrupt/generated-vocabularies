/*
 * Proprietary and Confidential
 *
 * Copyright 2020 Inrupt Inc. - all rights reserved.
 *
 * Do not use without explicit permission from Inrupt Inc.
 */

import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";
const namedNode = dataFactory.namedNode;

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.5]
  as part of artifact: [vocab-core], version: [0.3.3]
  at 'Tuesday, May 5, 2020 4:18 PM'.

  Vocabulary built from vocab list file: [lit-rdf-vocab/Core/Vocab-List-LIT-Core.yml].

  The LIT vocabulary providing terms (e.g. classes, properties and text strings (e.g.
 informative labels or error messages) used by LIT clients at runtime.
 */

function _NS(localName: string) { 
  return (namedNode("https://w3id.org/lit/vocab/lit-meta-client#" + localName));
}

const LIT_META_CLIENT = {
  PREFIX: "lit-meta-client",
  NAMESPACE: "https://w3id.org/lit/vocab/lit-meta-client#",
  PREFIX_AND_NAMESPACE: { "lit-meta-client": "https://w3id.org/lit/vocab/lit-meta-client#" },
  NS: _NS,


  // *******************
  // All the Properties.
  // *******************

  /**
   * The Named Graph used to denote client-side meta-data. This
 can be used when a request or response contains multiple Named Graphs of
 information, and we wish to specifically store client-side meta-data separately
 from all other forms of meta-data.
   */
  namedGraph: new LitVocabTerm(
    _NS("namedGraph"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Client meta-data named graph`, "en")
    .addComment(`The Named Graph used to denote client-side meta-data. This
 can be used when a request or response contains multiple Named Graphs of
 information, and we wish to specifically store client-side meta-data separately
 from all other forms of meta-data.`, "en"),

  /**
   * The root subject for client-generated metadata.
 The idea for subject roots is that we could build up an entire graph of
 metadata (i.e. as processing progresses along a chain of processors, with each
 processor enriching this metadata with their specific metadata), and this
 term defines the root term of that graph.
   */
  subjectRoot: new LitVocabTerm(
    _NS("subjectRoot"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Subject root`, "en")
    .addComment(`The root subject for client-generated metadata.
 The idea for subject roots is that we could build up an entire graph of
 metadata (i.e. as processing progresses along a chain of processors, with each
 processor enriching this metadata with their specific metadata), and this
 term defines the root term of that graph.`, "en"),

  /**
   * Timestamp this request was sent from the client.
   */
  requestSentTimestamp: new LitVocabTerm(
    _NS("requestSentTimestamp"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Request sent timestamp`, "en")
    .addComment(`Timestamp this request was sent from the client.`, "en"),

};

export { LIT_META_CLIENT };
