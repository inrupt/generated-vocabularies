    /*
 * Proprietary and Confidential
 *
 * Copyright 2020 Inrupt Inc. - all rights reserved.
 *
 * Do not use without explicit permission from Inrupt Inc.
 */

const namespace = require("@rdfjs/namespace");

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.5]
  as part of artifact: [vocab-solid-common], version: [0.3.2]
  at 'Tuesday, May 5, 2020 4:20 PM'.

  Vocabulary built from vocab list file: [solid-rdf-vocab/Common/Vocab-List-Solid-Common.yml].
 */

const RDFJS_NAMESPACE = namespace("http://www.w3.org/ns/solid/terms#");

const _NAMESPACE = "http://www.w3.org/ns/solid/terms#";
function _NS (localName) {
  return (_NAMESPACE + localName);
}

const SOLID = {
  PREFIX: "solid",
  NAMESPACE: _NAMESPACE,
  PREFIX_AND_NAMESPACE: { "solid": "http://www.w3.org/ns/solid/terms#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A Solid account.
   */
  Account: RDFJS_NAMESPACE("Account"),

  /**
   * A resource containing notifications.
   */
  Inbox: RDFJS_NAMESPACE("Inbox"),

  /**
   * Listed Type Index is a registry of resources that are publicly discoverable by outside users and applications.
   */
  ListedDocument: RDFJS_NAMESPACE("ListedDocument"),

  /**
   * A notification resource.
   */
  Notification: RDFJS_NAMESPACE("Notification"),

  /**
   * A patch expresses conditional modifications to a resource that has an RDF-based representation.
   */
  Patch: RDFJS_NAMESPACE("Patch"),

  /**
   * A resource containing time ordered items and sub-containers.  Sub-containers may be desirable in file based systems to split the timeline into logical components e.g. /yyyy-mm-dd/ as used in ISO 8061.
   */
  Timeline: RDFJS_NAMESPACE("Timeline"),

  /**
   * A index of type registries for resources. Applications can register the RDF type they use and list them in the index resource.
   */
  TypeIndex: RDFJS_NAMESPACE("TypeIndex"),

  /**
   * The registered types that map a RDF classes/types to their locations using either `instance` or `instanceContainer` property.
   */
  TypeRegistration: RDFJS_NAMESPACE("TypeRegistration"),

  /**
   * Unlisted Type Index is a registry of resources that are private to the user and their apps, for types that are not publicly discoverable.
   */
  UnlistedDocument: RDFJS_NAMESPACE("UnlistedDocument"),

  // *******************
  // All the Properties.
  // *******************

  /**
   * A solid account belonging to an Agent.
   */
  account: RDFJS_NAMESPACE("account"),

  /**
   * The triple patterns this patch removes from the document.
   */
  deletes: RDFJS_NAMESPACE("deletes"),

  /**
   * A class that is used to map an listed or unlisted type index.
   */
  forClass: RDFJS_NAMESPACE("forClass"),

  /**
   * Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.
   */
  inbox: RDFJS_NAMESPACE("inbox"),

  /**
   * The triple patterns this patch adds to the document.
   */
  inserts: RDFJS_NAMESPACE("inserts"),

  /**
   * Maps a type to an individual resource, typically an index or a directory listing resource.
   */
  instance: RDFJS_NAMESPACE("instance"),

  /**
   * Maps a type to a container which the client would have to list to get the instances of that type.
   */
  instanceContainer: RDFJS_NAMESPACE("instanceContainer"),

  /**
   * The login URI of a given server.
   */
  loginEndpoint: RDFJS_NAMESPACE("loginEndpoint"),

  /**
   * The logout URI of a given server.
   */
  logoutEndpoint: RDFJS_NAMESPACE("logoutEndpoint"),

  /**
   * Notification resource for an inbox.
   */
  notification: RDFJS_NAMESPACE("notification"),

  /**
   * Points to an unlisted type index resource.
   */
  privateTypeIndex: RDFJS_NAMESPACE("privateTypeIndex"),

  /**
   * Points to a listed type index resource.
   */
  publicTypeIndex: RDFJS_NAMESPACE("publicTypeIndex"),

  /**
   * Points to a TypeIndex resource.
   */
  typeIndex: RDFJS_NAMESPACE("typeIndex"),

  /**
   * Indicates if a message has been read or not. This property should have a boolean datatype.
   */
  read: RDFJS_NAMESPACE("read"),

  /**
   * The preferred OpenID Connect issuer URI for a given Web ID.
   */
  oidcIssuer: RDFJS_NAMESPACE("oidcIssuer"),

  /**
   * The document to which this patch applies.
   */
  patches: RDFJS_NAMESPACE("patches"),

  /**
   * Timeline for a given resource.
   */
  timeline: RDFJS_NAMESPACE("timeline"),

  /**
   * The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.
   */
  where: RDFJS_NAMESPACE("where"),

  /**
   * The quota of non-volatile memory that is available for the account (in bytes)
   */
  storageQuota: RDFJS_NAMESPACE("storageQuota"),

  /**
   * The amount of non-volatile memory that the account have used (in bytes)
   */
  storageUsage: RDFJS_NAMESPACE("storageUsage"),

  //
  // Marker allowing us put commas at the end of all lines above (only the last line does not have a comma).
  //
  END_OF_VOCAB: 'End of vocab.'
}

module.exports = SOLID;
