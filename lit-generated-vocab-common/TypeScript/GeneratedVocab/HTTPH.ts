/*
 * Proprietary and Confidential
 *
 * Copyright 2020 Inrupt Inc. - all rights reserved.
 *
 * Do not use without explicit permission from Inrupt Inc.
 */

import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";
const namedNode = dataFactory.namedNode;

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.5]
  as part of artifact: [vocab-common], version: [0.3.4]
  at 'Tuesday, May 5, 2020 4:12 PM'.

  Vocabulary built from vocab list file: [lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */

function _NS(localName: string) { 
  return (namedNode("http://www.w3.org/2007/ont/httph#" + localName));
}

const HTTPH = {
  PREFIX: "httph",
  NAMESPACE: "http://www.w3.org/2007/ont/httph#",
  PREFIX_AND_NAMESPACE: { "httph": "http://www.w3.org/2007/ont/httph#" },
  NS: _NS,


  // *******************
  // All the Properties.
  // *******************

  /**
   * See the HTTP specification
   */
  content_type: new LitVocabTerm(
    _NS("content-type"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`content type`)
    .addCommentNoLanguage(`See the HTTP specification`),

  /**
   * See the HTTP specification
   */
  accept: new LitVocabTerm(
    _NS("accept"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Accept`, "en")
    .addComment(`See the HTTP specification`, "en"),

  /**
   * See the HTTP specification
   */
  accept_language: new LitVocabTerm(
    _NS("accept-language"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Accept-Language`, "en")
    .addComment(`See the HTTP specification`, "en"),

};

export { HTTPH };
